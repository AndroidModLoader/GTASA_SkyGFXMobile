#include <externs.h>

#ifdef _SAUTILS_INTERFACE
    ISAUtils* sautils = NULL;
    eTypeOfSettings skygfxSettingsTab;
#endif

extern void* hGTASA;
extern uintptr_t pGTASA;

uint32_t TempBufferIndicesStored, TempBufferVerticesStored;
VertexBuffer TempVertexBuffer;

// Variables
RpLight **p_pDirect, **p_pAmbient;
RwRGBAReal *p_AmbientLightColourForFrame, *p_AmbientLightColourForFrame_PedsCarsAndObjects, *p_DirectionalLightColourForFrame, *p_DirectionalLightColourFromDay;
RsGlobalType* RsGlobal;
int *pnGrainStrength, *currArea;
bool *pbGrainEnable, *pbRainEnable, *pbInCutscene, *pbNightVision, *pbInfraredVision;
float *pfWeatherRain, *pfWeatherUnderwaterness, *pfWeatherHeatHaze;
CCamera *TheCamera;
uintptr_t pg_fx;
bool* pbCCTV;
bool* pbFog ;
float* m_fDNBalanceParam;
float* rwOpenGLOpaqueBlack;
int* rwOpenGLLightingEnabled;
int* rwOpenGLColorMaterialEnabled;
int* ms_envMapPluginOffset;
int* RasterExtOffset;
char* doPop;
RwRaster *grainRaster;
extern float*  m_fDNBalanceParam;
CPlantSurfProp** m_SurfPropPtrTab;
uint32_t*      m_countSurfPropsAllocated;
CPlantSurfProp m_SurfPropTab[MAX_SURFACE_PROPS];
RwTexture*     tex_gras07Si;
RwTexture**    PC_PlantSlotTextureTab[4];
RwTexture*     PC_PlantTextureTab0[4];
RwTexture*     PC_PlantTextureTab1[4];
RpAtomic**     PC_PlantModelSlotTab[4];
RpAtomic*      PC_PlantModelsTab0[4];
RpAtomic*      PC_PlantModelsTab1[4];
CPlantLocTri** m_CloseLocTriListHead;
CPlantLocTri** m_UnusedLocTriListHead;
float *TimeCycShadowDispX, *TimeCycShadowDispY, *TimeCycShadowFrontX, *TimeCycShadowFrontY, *TimeCycShadowSideX, *TimeCycShadowSideY;
int *TimeCycCurrentStoredValue;
int *RTShadowsQuality;
RQCapabilities *RQCaps;
int *RQMaxBones;
int* deviceChip;
float *openglAmbientLight;
float _rwOpenGLOpaqueBlack[4];
RwInt32 *p_rwOpenGLColorMaterialEnabled;
CColourSet *p_CTimeCycle__m_CurrentColours;
CVector *p_CTimeCycle__m_vecDirnLightToSun;
float *p_gfLaRiotsLightMult;
float *p_CCoronas__LightsMult;
uint8_t *p_CWeather__LightningFlash;
float *skin_map;
int *skin_dirty;
int *skin_num;
bool *LightningFlash;
int *ms_extraVertColourPluginOffset;
bool *RwHackNoCompressedTexCoords;
RQShader **curSelectedShader;
float *AmbientLightColor;
bool *AmbientLightDirty;
float *ms_fFarClip;
RenderQueue** renderQueue;
RwRaster** pRasterFrontBuffer;
int *curActiveTexture;
int *boundTextures;
GlobalSceneTag *Scene;
GLenum *currentAlphaFunc;
float *currentAlphaFuncVal;
uint32_t *curShaderStateFlags;
rwOGlRenderState *RenderState;
float *Foggyness;
float *gradeBlur;
int *renderWidth, *renderHeight;
ES2RenderTarget **backTarget;
ES2RenderTarget **currentTarget;
fxSpeedSettings *FX_SPEED_VARS;
bool *m_bHeatHazeFX, *m_foundHeatHazeInfo, *m_bRadiosity, *m_bDarknessFilter;
float *HeatHazeFXControl, *WaterDepth, *ms_fTimeStep;
int *m_nHighLightMinIntensity;
CColourSet *m_CurrentColours;
uint32_t *m_snTimeInMilliseconds;

// Functions
RwFrame*            (*RwFrameTransform)(RwFrame * frame, const RwMatrix * m, RwOpCombineType combine);
RpLight*            (*RpLightSetColor)(RpLight *light, const RwRGBAReal *color);
void                (*emu_glColor4fv)(const GLfloat *v);
void                (*emu_glLightModelfv)(GLenum pname, const GLfloat *params);
void                (*emu_glMaterialfv)(GLenum face, GLenum pname, const GLfloat *params);
void                (*emu_glColorMaterial)(GLenum face, GLenum mode);
void                (*emu_glEnable)(GLenum cap);
void                (*emu_glDisable)(GLenum cap);
RwRaster*           (*RwRasterCreate)(RwInt32 width, RwInt32 height, RwInt32 depth, RwInt32 flags);
RwUInt8*            (*RwRasterLock)(RwRaster*, unsigned char, int);
void                (*RwRasterUnlock)(RwRaster*);
void                (*ImmediateModeRenderStatesStore)();
void                (*ImmediateModeRenderStatesSet)();
void                (*ImmediateModeRenderStatesReStore)();
void                (*RwRenderStateSet)(RwRenderState, void*);
void                (*DrawQuadSetUVs)(float,float,float,float,float,float,float,float);
void                (*PostEffectsDrawQuad)(float,float,float,float,uint8_t,uint8_t,uint8_t,uint8_t,RwRaster*);
void                (*DrawQuadSetDefaultUVs)(void);
uint8_t             (*CamNoRain)();
uint8_t             (*PlayerNoRain)();
void                (*RenderFx)(uintptr_t, uintptr_t, unsigned char) ;
void                (*RenderWaterCannons)() ;
void                (*RenderWaterFog)() ;
void                (*RenderMovingFog)() ;
void                (*RenderVolumetricClouds)() ;
void                (*RenderScreenFogPostEffect)() ;
void                (*RenderCCTVPostEffect)() ;
void                (*_rxPipelineDestroy)(RxPipeline*);
RxPipeline*         (*RxPipelineCreate)();
RxLockedPipe*       (*RxPipelineLock)(RxPipeline*);
RxNodeDefinition*   (*RxNodeDefinitionGetOpenGLAtomicAllInOne)();
void*               (*RxLockedPipeAddFragment)(RxLockedPipe*, int, RxNodeDefinition*, int);
RxLockedPipe*       (*RxLockedPipeUnlock)(RxLockedPipe*);
RxPipelineNode*     (*RxPipelineFindNodeByName)(RxPipeline*, const char*, int, int);
void                (*RxOpenGLAllInOneSetInstanceCallBack)(RxPipelineNode*, void*);
void                (*RxOpenGLAllInOneSetRenderCallBack)(RxPipelineNode*, void*);
void                (*_rwOpenGLSetRenderState)(RwRenderState, int); //
void                (*_rwOpenGLGetRenderState)(RwRenderState, void*); //
void                (*_rwOpenGLSetRenderStateNoExtras)(RwRenderState, void*); //
void                (*_rwOpenGLLightsSetMaterialPropertiesORG)(const RpMaterial *mat, RwUInt32 flags); //
void                (*SetNormalMatrix)(float, float, RwV2d); //
void                (*DrawStoredMeshData)(RxOpenGLMeshInstanceData*);
void                (*ResetEnvMap)();
void                (*SetSecondVertexColor)(uint8_t, float);
void                (*EnableAlphaModulate)(float);
void                (*DisableAlphaModulate)();
void                (*SetEnvMap)(void*, float, int);
void                (*FileMgrSetDir)(const char* dir);
FILE*               (*FileMgrOpenFile)(const char* dir, const char* ioflags);
void                (*FileMgrCloseFile)(FILE*);
char*               (*FileLoaderLoadLine)(FILE*);
unsigned short      (*GetSurfaceIdFromName)(void* trash, const char* surfname);
uintptr_t           (*LoadTextureDB)(const char* dbFile, bool fullLoad, int txdbFormat);
uintptr_t           (*GetTextureDB)(const char* dbFile);
void                (*RegisterTextureDB)(uintptr_t dbPtr);
void                (*UnregisterTextureDB)(uintptr_t dbPtr);
RwTexture*          (*GetTextureFromTextureDB)(const char* texture);
int                 (*AddImageToList)(const char* imgName, bool isPlayerImg);
int                 (*SetPlantModelsTab)(unsigned int, RpAtomic**);
int                 (*SetCloseFarAlphaDist)(float, float);
void                (*FlushTriPlantBuffer)();
void                (*DeActivateDirectional)();
void                (*SetAmbientColours)(RwRGBAReal*);
bool                (*IsSphereVisibleForCamera)(CCamera*, const CVector*, float);
void                (*AddTriPlant)(PPTriPlant*, unsigned int);
void                (*MoveLocTriToList)(CPlantLocTri*& oldList, CPlantLocTri*& newList, CPlantLocTri* triangle);
void                (*StreamingMakeSpaceFor)(int);
RwStream*           (*RwStreamOpen)(int, int, const char*);
bool                (*RwStreamFindChunk)(RwStream*, int, int, int);
RpClump*            (*RpClumpStreamRead)(RwStream*);
void                (*RwStreamClose)(RwStream*, int);
RpAtomic*           (*GetFirstAtomic)(RpClump*);
void                (*SetFilterModeOnAtomicsTextures)(RpAtomic*, int);
void                (*RpGeometryLock)(RpGeometry*, int);
void                (*RpGeometryUnlock)(RpGeometry*);
void                (*RpGeometryForAllMaterials)(RpGeometry*, RpMaterial* (*)(RpMaterial*, void*), void*);
void                (*RpMaterialSetTexture)(RpMaterial*, RwTexture*);
RpAtomic*           (*RpAtomicClone)(RpAtomic*);
void                (*RpClumpDestroy)(RpClump*);
RwFrame*            (*RwFrameCreate)();
void                (*RpAtomicSetFrame)(RpAtomic*, RwFrame*);
void                (*RenderAtomicWithAlpha)(RpAtomic*, int alphaVal);
RpGeometry*         (*RpGeometryCreate)(int, int, unsigned int); //
RpMaterial*         (*RpGeometryTriangleGetMaterial)(RpGeometry*, RpTriangle*); //
void                (*RpGeometryTriangleSetMaterial)(RpGeometry*, RpTriangle*, RpMaterial*); //
void                (*RpAtomicSetGeometry)(RpAtomic*, RpGeometry*, unsigned int);
RwCamera*           (*CreateShadowCamera)(ShadowCameraStorage*, int size);
void                (*DestroyShadowCamera)(CShadowCamera*);
void                (*MakeGradientRaster)(ShadowCameraStorage*);
void                (*_rwObjectHasFrameSetFrame)(void*, RwFrame*);
void                (*RwFrameDestroy)(RwFrame*);
void                (*RpLightDestroy)(RpLight*);
void                (*CreateRTShadow)(CRealTimeShadow* shadow, int size, bool blur, int blurPasses, bool hasGradient);
void                (*SetShadowedObject)(CRealTimeShadow* shadow, CPhysical* physical);
int                 (*CamDistComp)(const void*, const void*);
bool                (*StoreRealTimeShadow)(CPhysical* physical, float shadowDispX, float shadowDispY, float shadowFrontX, float shadowFrontY, float shadowSideX, float shadowSideY);
void                (*UpdateRTShadow)(CRealTimeShadow* shadow);
int                 (*GetMobileEffectSetting)();
void                (*EntityPreRender)(CEntity* entity);
void                (*Radiosity)(int32_t intensityLimit, int32_t filterPasses, int32_t renderPasses, int32_t intensity);
void                (*HeatHazeFX)(float, bool);
bool                (*IsVisionFXActive)();
float               (*TimeCycGetAmbientRed)();
float               (*TimeCycGetAmbientGreen)();
float               (*TimeCycGetAmbientBlue)();
uint32_t            (*GetPipelineID)(RpAtomic*);
RwRGBA*             (*GetExtraVertColourPtr)(RpGeometry*);
void                (*emu_ArraysDelete)(ArrayState*);
void                (*_rxOpenGLAllInOneAtomicInstanceVertexArray)(RxOpenGLMeshInstanceData *, RpAtomic const*, RpGeometry const*, RpGeometryFlag, int, int, unsigned char *, RwRGBA *, RwRGBA *);
void                (*emu_ArraysReset)();
void                (*emu_ArraysIndices)(void*, unsigned int, unsigned int);
void                (*emu_ArraysVertex)(void*, unsigned int, unsigned int, unsigned int);
void                (*emu_ArraysVertexAttrib)(unsigned int, int, unsigned int, unsigned char, unsigned int);
ArrayState*         (*emu_ArraysStore)(unsigned char, unsigned char);
bool                (*rwIsAlphaBlendOn)();
ES2Shader*          (*RQCreateShader)(const char* pixel, const char* vertex, uint32_t flags);
void                (*OS_ThreadMakeCurrent)();
void                (*OS_ThreadUnmakeCurrent)();
void                (*SelectEmuShader)(EmuShader*, bool isNewSelection);
void                (*RenderCoronas)();
void                (*RenderSkyPolys)();
void                (*RenderPlants)();
void                (*RenderClouds)();
void                (*OS_MutexObtain)(OSMutex);
void                (*OS_MutexRelease)(OSMutex);
void                (*RQ_Process)(RenderQueue*);
void                (*RQ_Flush)(RenderQueue*);
void                (*RwCameraEndUpdate)(RwCamera*);
void                (*RsCameraBeginUpdate)(RwCamera*);
void                (*SpeedFX)(float);
CVector*            (*FindPlayerSpeed)(int);
CPlayerPed*         (*FindPlayerPed)(int);
bool8               (*RwRasterDestroy)(RwRaster*);
void                (*InitSpriteBuffer2D)();
void                (*emu_glBegin)(int);
void                (*emu_glVertex3f)(float,float,float);
void                (*emu_glTexCoord2f)(float,float);
void                (*emu_glEnd)();
RwBool              (*RwTextureDestroy)(RwTexture*);
CVehicle*           (*FindPlayerVehicle)(int,bool);
void                (*RwIm2DRenderPrimitive)(RwPrimitiveType,RwOpenGLVertex*,int);
float               (*RwIm2DGetNearScreenZ)();

// Main
void ResolveExternals()
{
    SET_TO(RwFrameTransform,                aml->GetSym(hGTASA, "_Z16RwFrameTransformP7RwFramePK11RwMatrixTag15RwOpCombineType"));
    SET_TO(RpLightSetColor,                 aml->GetSym(hGTASA, "_Z15RpLightSetColorP7RpLightPK10RwRGBAReal"));
    SET_TO(p_pAmbient,                      aml->GetSym(hGTASA, "pAmbient"));
    SET_TO(p_pDirect,                       aml->GetSym(hGTASA, "pDirect"));
    SET_TO(p_AmbientLightColourForFrame,    aml->GetSym(hGTASA, "AmbientLightColourForFrame"));
    SET_TO(p_AmbientLightColourForFrame_PedsCarsAndObjects, aml->GetSym(hGTASA, "AmbientLightColourForFrame_PedsCarsAndObjects"));
    SET_TO(p_DirectionalLightColourForFrame,aml->GetSym(hGTASA, "DirectionalLightColourForFrame"));
    SET_TO(p_DirectionalLightColourFromDay, aml->GetSym(hGTASA, "DirectionalLightColourFromDay"));
    SET_TO(p_CTimeCycle__m_CurrentColours,  aml->GetSym(hGTASA, "_ZN10CTimeCycle16m_CurrentColoursE"));
    SET_TO(p_CTimeCycle__m_vecDirnLightToSun, aml->GetSym(hGTASA, "_ZN10CTimeCycle19m_vecDirnLightToSunE"));
    SET_TO(p_gfLaRiotsLightMult,            aml->GetSym(hGTASA, "gfLaRiotsLightMult"));
    SET_TO(p_CCoronas__LightsMult,          aml->GetSym(hGTASA, "_ZN8CCoronas10LightsMultE"));
    SET_TO(p_CWeather__LightningFlash,      aml->GetSym(hGTASA, "_ZN8CWeather14LightningFlashE"));
    SET_TO(openglAmbientLight,              aml->GetSym(hGTASA, "openglAmbientLight"));
    SET_TO(p_rwOpenGLColorMaterialEnabled,  aml->GetSym(hGTASA, "_rwOpenGLColorMaterialEnabled"));
    SET_TO(emu_glColor4fv,                  aml->GetSym(hGTASA, "_Z14emu_glColor4fvPKf"));
    SET_TO(emu_glLightModelfv,              aml->GetSym(hGTASA, "_Z18emu_glLightModelfvjPKf"));
    SET_TO(emu_glMaterialfv,                aml->GetSym(hGTASA, "_Z16emu_glMaterialfvjjPKf"));
    SET_TO(emu_glColorMaterial,             aml->GetSym(hGTASA, "_Z19emu_glColorMaterialjj"));
    SET_TO(emu_glEnable,                    aml->GetSym(hGTASA, "_Z12emu_glEnablej"));
    SET_TO(emu_glDisable,                   aml->GetSym(hGTASA, "_Z13emu_glDisablej"));
    SET_TO(_rxPipelineDestroy,              aml->GetSym(hGTASA, "_Z18_rxPipelineDestroyP10RxPipeline"));
    SET_TO(RxPipelineCreate,                aml->GetSym(hGTASA, "_Z16RxPipelineCreatev"));
    SET_TO(RxPipelineLock,                  aml->GetSym(hGTASA, "_Z14RxPipelineLockP10RxPipeline"));
    SET_TO(RxNodeDefinitionGetOpenGLAtomicAllInOne, aml->GetSym(hGTASA, "_Z39RxNodeDefinitionGetOpenGLAtomicAllInOnev"));
    SET_TO(RxLockedPipeAddFragment,         aml->GetSym(hGTASA, "_Z23RxLockedPipeAddFragmentP10RxPipelinePjP16RxNodeDefinitionz"));
    SET_TO(RxLockedPipeUnlock,              aml->GetSym(hGTASA, "_Z18RxLockedPipeUnlockP10RxPipeline"));
    SET_TO(RxPipelineFindNodeByName,        aml->GetSym(hGTASA, "_Z24RxPipelineFindNodeByNameP10RxPipelinePKcP14RxPipelineNodePi"));
    SET_TO(RxOpenGLAllInOneSetInstanceCallBack, aml->GetSym(hGTASA, "_Z35RxOpenGLAllInOneSetInstanceCallBackP14RxPipelineNodePFiPvP24RxOpenGLMeshInstanceDataiiE"));
    SET_TO(RxOpenGLAllInOneSetRenderCallBack, aml->GetSym(hGTASA, "_Z33RxOpenGLAllInOneSetRenderCallBackP14RxPipelineNodePFvP10RwResEntryPvhjE"));
    SET_TO(_rwOpenGLSetRenderState,         aml->GetSym(hGTASA, "_Z16RwRenderStateSet13RwRenderStatePv"));
    SET_TO(_rwOpenGLGetRenderState,         aml->GetSym(hGTASA, "_Z16RwRenderStateGet13RwRenderStatePv"));
    SET_TO(_rwOpenGLSetRenderStateNoExtras, aml->GetSym(hGTASA, "_Z31_rwOpenGLSetRenderStateNoExtras13RwRenderStatePv"));
    SET_TO(_rwOpenGLLightsSetMaterialPropertiesORG, aml->GetSym(hGTASA, "_Z36_rwOpenGLLightsSetMaterialPropertiesPK10RpMaterialj"));
    SET_TO(SetNormalMatrix,                 aml->GetSym(hGTASA, "_Z15SetNormalMatrixff5RwV2d"));
    SET_TO(DrawStoredMeshData,              aml->GetSym(hGTASA, "_ZN24RxOpenGLMeshInstanceData10DrawStoredEv"));
    SET_TO(ResetEnvMap,                     aml->GetSym(hGTASA, "_Z11ResetEnvMapv"));
    SET_TO(rwOpenGLOpaqueBlack,             aml->GetSym(hGTASA, "_rwOpenGLOpaqueBlack"));
    SET_TO(rwOpenGLLightingEnabled,         aml->GetSym(hGTASA, "_rwOpenGLLightingEnabled"));
    SET_TO(rwOpenGLColorMaterialEnabled,    aml->GetSym(hGTASA, "_rwOpenGLColorMaterialEnabled"));
    SET_TO(ms_envMapPluginOffset,           aml->GetSym(hGTASA, "_ZN24CCustomCarEnvMapPipeline21ms_envMapPluginOffsetE"));
    SET_TO(RasterExtOffset,                 aml->GetSym(hGTASA, "RasterExtOffset"));
    SET_TO(doPop,                           pGTASA + BYBIT(0x70BF3C, 0x8EABEC));
    SET_TO(SetSecondVertexColor,            aml->GetSym(hGTASA, "_Z24emu_SetSecondVertexColorhf"));
    SET_TO(EnableAlphaModulate,             aml->GetSym(hGTASA, "_Z23emu_EnableAlphaModulatef"));
    SET_TO(DisableAlphaModulate,            aml->GetSym(hGTASA, "_Z24emu_DisableAlphaModulatev"));
    SET_TO(SetEnvMap,                       aml->GetSym(hGTASA, "_Z13emu_SetEnvMapPvfi"));
    SET_TO(RwRasterCreate,                  aml->GetSym(hGTASA, "_Z14RwRasterCreateiiii"));
    SET_TO(RwRasterLock,                    aml->GetSym(hGTASA, "_Z12RwRasterLockP8RwRasterhi"));
    SET_TO(RwRasterUnlock,                  aml->GetSym(hGTASA, "_Z14RwRasterUnlockP8RwRaster"));
    SET_TO(ImmediateModeRenderStatesStore,  aml->GetSym(hGTASA, "_ZN12CPostEffects30ImmediateModeRenderStatesStoreEv"));
    SET_TO(ImmediateModeRenderStatesSet,    aml->GetSym(hGTASA, "_ZN12CPostEffects28ImmediateModeRenderStatesSetEv"));
    SET_TO(ImmediateModeRenderStatesReStore,aml->GetSym(hGTASA, "_ZN12CPostEffects32ImmediateModeRenderStatesReStoreEv"));
    SET_TO(RwRenderStateSet,                aml->GetSym(hGTASA, "_Z16RwRenderStateSet13RwRenderStatePv"));
    SET_TO(DrawQuadSetUVs,                  aml->GetSym(hGTASA, "_ZN12CPostEffects14DrawQuadSetUVsEffffffff"));
    SET_TO(PostEffectsDrawQuad,             aml->GetSym(hGTASA, "_ZN12CPostEffects8DrawQuadEffffhhhhP8RwRaster"));
    SET_TO(DrawQuadSetDefaultUVs,           aml->GetSym(hGTASA, "_ZN12CPostEffects21DrawQuadSetDefaultUVsEv"));
    SET_TO(CamNoRain,                       aml->GetSym(hGTASA, "_ZN10CCullZones9CamNoRainEv"));
    SET_TO(PlayerNoRain,                    aml->GetSym(hGTASA, "_ZN10CCullZones12PlayerNoRainEv"));
    SET_TO(RsGlobal,                        aml->GetSym(hGTASA, "RsGlobal"));
    SET_TO(pnGrainStrength,                 aml->GetSym(hGTASA, "_ZN12CPostEffects15m_grainStrengthE"));
    SET_TO(currArea,                        aml->GetSym(hGTASA, "_ZN5CGame8currAreaE"));
    SET_TO(pbGrainEnable,                   aml->GetSym(hGTASA, "_ZN12CPostEffects14m_bGrainEnableE"));
    SET_TO(pbRainEnable,                    aml->GetSym(hGTASA, "_ZN12CPostEffects13m_bRainEnableE"));
    SET_TO(pbInCutscene,                    aml->GetSym(hGTASA, "_ZN12CPostEffects13m_bInCutsceneE"));
    SET_TO(pbNightVision,                   aml->GetSym(hGTASA, "_ZN12CPostEffects14m_bNightVisionE"));
    SET_TO(pbInfraredVision,                aml->GetSym(hGTASA, "_ZN12CPostEffects17m_bInfraredVisionE"));
    SET_TO(pfWeatherRain,                   aml->GetSym(hGTASA, "_ZN8CWeather4RainE"));
    SET_TO(pfWeatherUnderwaterness,         aml->GetSym(hGTASA, "_ZN8CWeather14UnderWaternessE"));
    SET_TO(pfWeatherHeatHaze,               aml->GetSym(hGTASA, "_ZN8CWeather8HeatHazeE"));
    SET_TO(TheCamera,                       aml->GetSym(hGTASA, "TheCamera"));
    SET_TO(pbCCTV,                          aml->GetSym(hGTASA, "_ZN12CPostEffects7m_bCCTVE"));
    SET_TO(RenderCCTVPostEffect,            aml->GetSym(hGTASA, "_ZN12CPostEffects4CCTVEv"));
    SET_TO(pbFog,                           aml->GetSym(hGTASA, "_ZN12CPostEffects6m_bFogE"));
    SET_TO(RenderScreenFogPostEffect,       aml->GetSym(hGTASA, "_ZN12CPostEffects3FogEv"));
    SET_TO(pg_fx,                           aml->GetSym(hGTASA, "g_fx"));
    SET_TO(RenderFx,                        aml->GetSym(hGTASA, "_ZN4Fx_c6RenderEP8RwCamerah"));
    SET_TO(RenderWaterCannons,              aml->GetSym(hGTASA, "_ZN13CWaterCannons6RenderEv"));
    SET_TO(RenderWaterFog,                  aml->GetSym(hGTASA, "_ZN11CWaterLevel14RenderWaterFogEv"));
    SET_TO(RenderMovingFog,                 aml->GetSym(hGTASA, "_ZN7CClouds15MovingFogRenderEv"));
    SET_TO(RenderVolumetricClouds,          aml->GetSym(hGTASA, "_ZN7CClouds22VolumetricCloudsRenderEv"));
    SET_TO(FileMgrSetDir,                   aml->GetSym(hGTASA, "_ZN8CFileMgr6SetDirEPKc"));
    SET_TO(FileMgrOpenFile,                 aml->GetSym(hGTASA, "_ZN8CFileMgr8OpenFileEPKcS1_"));
    SET_TO(FileMgrCloseFile,                aml->GetSym(hGTASA, BYBIT("_ZN8CFileMgr9CloseFileEj", "_ZN8CFileMgr9CloseFileEy")));
    SET_TO(FileLoaderLoadLine,              aml->GetSym(hGTASA, BYBIT("_ZN11CFileLoader8LoadLineEj", "_ZN11CFileLoader8LoadLineEy")));
    SET_TO(GetSurfaceIdFromName,            aml->GetSym(hGTASA, "_ZN14SurfaceInfos_c20GetSurfaceIdFromNameEPc"));
    SET_TO(m_SurfPropPtrTab,                aml->GetSym(hGTASA, "_ZN17CPlantSurfPropMgr16m_SurfPropPtrTabE"));
    SET_TO(m_countSurfPropsAllocated,       aml->GetSym(hGTASA, "_ZN17CPlantSurfPropMgr25m_countSurfPropsAllocatedE"));
    SET_TO(m_SurfPropTab,                   aml->GetSym(hGTASA, "_ZN17CPlantSurfPropMgr13m_SurfPropTabE"));
    SET_TO(StreamingMakeSpaceFor,           aml->GetSym(hGTASA, "_ZN10CStreaming12MakeSpaceForEi"));
    SET_TO(LoadTextureDB,                   aml->GetSym(hGTASA, "_ZN22TextureDatabaseRuntime4LoadEPKcb21TextureDatabaseFormat"));
    SET_TO(GetTextureDB,                    aml->GetSym(hGTASA, "_ZN22TextureDatabaseRuntime11GetDatabaseEPKc"));
    SET_TO(RegisterTextureDB,               aml->GetSym(hGTASA, "_ZN22TextureDatabaseRuntime8RegisterEPS_"));
    SET_TO(UnregisterTextureDB,             aml->GetSym(hGTASA, "_ZN22TextureDatabaseRuntime10UnregisterEPS_"));
    SET_TO(GetTextureFromTextureDB,         aml->GetSym(hGTASA, "_ZN22TextureDatabaseRuntime10GetTextureEPKc"));
    SET_TO(AddImageToList,                  aml->GetSym(hGTASA, "_ZN10CStreaming14AddImageToListEPKcb"));
    SET_TO(SetPlantModelsTab,               aml->GetSym(hGTASA, "_ZN14CGrassRenderer17SetPlantModelsTabEjPP8RpAtomic"));
    SET_TO(SetCloseFarAlphaDist,            aml->GetSym(hGTASA, "_ZN14CGrassRenderer20SetCloseFarAlphaDistEff"));
    SET_TO(FlushTriPlantBuffer,             aml->GetSym(hGTASA, "_ZN14CGrassRenderer19FlushTriPlantBufferEv"));
    SET_TO(SetAmbientColours,               aml->GetSym(hGTASA, "_Z17SetAmbientColoursP10RwRGBAReal"));
    SET_TO(DeActivateDirectional,           aml->GetSym(hGTASA, "_Z21DeActivateDirectionalv"));
    SET_TO(PC_PlantSlotTextureTab,          aml->GetSym(hGTASA, "_ZN9CPlantMgr22PC_PlantSlotTextureTabE"));
    SET_TO(PC_PlantTextureTab0,             aml->GetSym(hGTASA, "_ZN9CPlantMgr19PC_PlantTextureTab0E"));
    SET_TO(PC_PlantTextureTab1,             aml->GetSym(hGTASA, "_ZN9CPlantMgr19PC_PlantTextureTab1E"));
    SET_TO(PC_PlantModelSlotTab,            aml->GetSym(hGTASA, "_ZN9CPlantMgr20PC_PlantModelSlotTabE"));
    SET_TO(PC_PlantModelsTab0,              aml->GetSym(hGTASA, "_ZN9CPlantMgr18PC_PlantModelsTab0E"));
    SET_TO(PC_PlantModelsTab1,              aml->GetSym(hGTASA, "_ZN9CPlantMgr18PC_PlantModelsTab1E"));
    SET_TO(RwStreamOpen,                    aml->GetSym(hGTASA, "_Z12RwStreamOpen12RwStreamType18RwStreamAccessTypePKv"));
    SET_TO(RwStreamFindChunk,               aml->GetSym(hGTASA, "_Z17RwStreamFindChunkP8RwStreamjPjS1_"));
    SET_TO(RpClumpStreamRead,               aml->GetSym(hGTASA, "_Z17RpClumpStreamReadP8RwStream"));
    SET_TO(RwStreamClose,                   aml->GetSym(hGTASA, "_Z13RwStreamCloseP8RwStreamPv"));
    SET_TO(GetFirstAtomic,                  aml->GetSym(hGTASA, "_Z14GetFirstAtomicP7RpClump"));
    SET_TO(SetFilterModeOnAtomicsTextures,  aml->GetSym(hGTASA, "_Z30SetFilterModeOnAtomicsTexturesP8RpAtomic19RwTextureFilterMode"));
    SET_TO(RpGeometryLock,                  aml->GetSym(hGTASA, "_Z14RpGeometryLockP10RpGeometryi"));
    SET_TO(RpGeometryUnlock,                aml->GetSym(hGTASA, "_Z16RpGeometryUnlockP10RpGeometry"));
    SET_TO(RpGeometryForAllMaterials,       aml->GetSym(hGTASA, "_Z25RpGeometryForAllMaterialsP10RpGeometryPFP10RpMaterialS2_PvES3_"));
    SET_TO(RpMaterialSetTexture,            aml->GetSym(hGTASA, "_Z20RpMaterialSetTextureP10RpMaterialP9RwTexture"));
    SET_TO(RpAtomicClone,                   aml->GetSym(hGTASA, "_Z13RpAtomicCloneP8RpAtomic"));
    SET_TO(RpClumpDestroy,                  aml->GetSym(hGTASA, "_Z14RpClumpDestroyP7RpClump"));
    SET_TO(RwFrameCreate,                   aml->GetSym(hGTASA, "_Z13RwFrameCreatev"));
    SET_TO(RpAtomicSetFrame,                aml->GetSym(hGTASA, "_Z16RpAtomicSetFrameP8RpAtomicP7RwFrame"));
    SET_TO(RenderAtomicWithAlpha,           aml->GetSym(hGTASA, "_ZN18CVisibilityPlugins21RenderAtomicWithAlphaEP8RpAtomici"));
    SET_TO(RpGeometryCreate,                aml->GetSym(hGTASA, "_Z16RpGeometryCreateiij"));
    SET_TO(RpGeometryTriangleGetMaterial,   aml->GetSym(hGTASA, "_Z29RpGeometryTriangleGetMaterialPK10RpGeometryPK10RpTriangle"));
    SET_TO(RpGeometryTriangleSetMaterial,   aml->GetSym(hGTASA, "_Z29RpGeometryTriangleSetMaterialP10RpGeometryP10RpTriangleP10RpMaterial"));
    SET_TO(RpAtomicSetGeometry,             aml->GetSym(hGTASA, "_Z19RpAtomicSetGeometryP8RpAtomicP10RpGeometryj"));
    SET_TO(IsSphereVisibleForCamera,        aml->GetSym(hGTASA, "_ZN7CCamera15IsSphereVisibleERK7CVectorf"));
    SET_TO(AddTriPlant,                     aml->GetSym(hGTASA, "_ZN14CGrassRenderer11AddTriPlantEP10PPTriPlantj"));
    SET_TO(MoveLocTriToList,                aml->GetSym(hGTASA, "_ZN9CPlantMgr16MoveLocTriToListEPP12CPlantLocTriS2_S1_"));
    SET_TO(m_CloseLocTriListHead,           aml->GetSym(hGTASA, "_ZN9CPlantMgr21m_CloseLocTriListHeadE"));
    SET_TO(m_UnusedLocTriListHead,          aml->GetSym(hGTASA, "_ZN9CPlantMgr22m_UnusedLocTriListHeadE"));
    SET_TO(m_fDNBalanceParam,               aml->GetSym(hGTASA, "_ZN25CCustomBuildingDNPipeline17m_fDNBalanceParamE"));
    SET_TO(CreateRTShadow,                  aml->GetSym(hGTASA, "_ZN15CRealTimeShadow6CreateEibib"));
    SET_TO(CreateShadowCamera,              aml->GetSym(hGTASA, "_ZN13CShadowCamera6CreateEi"));
    SET_TO(DestroyShadowCamera,             aml->GetSym(hGTASA, "_ZN13CShadowCamera7DestroyEv"));
    SET_TO(MakeGradientRaster,              aml->GetSym(hGTASA, "_ZN13CShadowCamera18MakeGradientRasterEv"));
    SET_TO(_rwObjectHasFrameSetFrame,       aml->GetSym(hGTASA, "_Z25_rwObjectHasFrameSetFramePvP7RwFrame"));
    SET_TO(RwFrameDestroy,                  aml->GetSym(hGTASA, "_Z14RwFrameDestroyP7RwFrame"));
    SET_TO(RpLightDestroy,                  aml->GetSym(hGTASA, "_Z14RpLightDestroyP7RpLight"));
    SET_TO(SetShadowedObject,               aml->GetSym(hGTASA, "_ZN15CRealTimeShadow17SetShadowedObjectEP9CPhysical"));
    SET_TO(RenderCoronas,                   aml->GetSym(hGTASA, "_ZN8CCoronas6RenderEv"));
    SET_TO(RenderSkyPolys,                  aml->GetSym(hGTASA, "_ZN7CClouds14RenderSkyPolysEv"));
    SET_TO(RenderPlants,                    *(uintptr_t*)(pGTASA + BYBIT(0x6726D0, 0x844308)));
    SET_TO(RenderClouds,                    *(uintptr_t*)(pGTASA + BYBIT(0x672FFC, 0x8451A0)));
    SET_TO(OS_MutexObtain,                  aml->GetSym(hGTASA, "_Z14OS_MutexObtainPv"));
    SET_TO(OS_MutexRelease,                 aml->GetSym(hGTASA, "_Z15OS_MutexReleasePv"));
    SET_TO(RQ_Process,                      aml->GetSym(hGTASA, "_ZN11RenderQueue7ProcessEv"));
    SET_TO(RQ_Flush,                        aml->GetSym(hGTASA, "_ZN11RenderQueue5FlushEv"));
    SET_TO(RwCameraEndUpdate,               aml->GetSym(hGTASA, "_Z17RwCameraEndUpdateP8RwCamera"));
    SET_TO(RsCameraBeginUpdate,             aml->GetSym(hGTASA, "_Z19RsCameraBeginUpdateP8RwCamera"));
    SET_TO(SpeedFX,                         aml->GetSym(hGTASA, "_ZN12CPostEffects7SpeedFXEf"));
    SET_TO(FindPlayerSpeed,                 aml->GetSym(hGTASA, "_Z15FindPlayerSpeedi"));
    SET_TO(FindPlayerPed,                   aml->GetSym(hGTASA, "_Z13FindPlayerPedi"));
    SET_TO(RwRasterDestroy,                 aml->GetSym(hGTASA, "_Z15RwRasterDestroyP8RwRaster"));
    SET_TO(InitSpriteBuffer2D,              aml->GetSym(hGTASA, "_ZN7CSprite18InitSpriteBuffer2DEv"));
    SET_TO(emu_glBegin,                     aml->GetSym(hGTASA, "_Z11emu_glBeginj"));
    SET_TO(emu_glVertex3f,                  aml->GetSym(hGTASA, "_Z14emu_glVertex3ffff"));
    SET_TO(emu_glTexCoord2f,                aml->GetSym(hGTASA, "_Z16emu_glTexCoord2fff"));
    SET_TO(emu_glEnd,                       aml->GetSym(hGTASA, "_Z9emu_glEndv"));
    SET_TO(RwTextureDestroy,                aml->GetSym(hGTASA, "_Z16RwTextureDestroyP9RwTexture"));
    SET_TO(FindPlayerVehicle,               aml->GetSym(hGTASA, "_Z17FindPlayerVehicleib"));
    SET_TO(RwIm2DRenderPrimitive,           aml->GetSym(hGTASA, "_Z28RwIm2DRenderPrimitive_BUGFIX15RwPrimitiveTypeP14RwOpenGLVertexi"));
    SET_TO(RwIm2DGetNearScreenZ,            aml->GetSym(hGTASA, "_Z20RwIm2DGetNearScreenZv"));

    SET_TO(CamDistComp,                     aml->GetSym(hGTASA, "_ZN22CRealTimeShadowManager11CamDistCompEPKvS1_"));
    SET_TO(StoreRealTimeShadow,             aml->GetSym(hGTASA, "_ZN8CShadows19StoreRealTimeShadowEP9CPhysicalffffff"));
    SET_TO(UpdateRTShadow,                  aml->GetSym(hGTASA, "_ZN15CRealTimeShadow6UpdateEv"));
    SET_TO(TimeCycShadowDispX,              aml->GetSym(hGTASA, "_ZN10CTimeCycle22m_fShadowDisplacementXE"));
    SET_TO(TimeCycShadowDispY,              aml->GetSym(hGTASA, "_ZN10CTimeCycle22m_fShadowDisplacementYE"));
    SET_TO(TimeCycShadowFrontX,             aml->GetSym(hGTASA, "_ZN10CTimeCycle15m_fShadowFrontXE"));
    SET_TO(TimeCycShadowFrontY,             aml->GetSym(hGTASA, "_ZN10CTimeCycle15m_fShadowFrontYE"));
    SET_TO(TimeCycShadowSideX,              aml->GetSym(hGTASA, "_ZN10CTimeCycle14m_fShadowSideXE"));
    SET_TO(TimeCycShadowSideY,              aml->GetSym(hGTASA, "_ZN10CTimeCycle14m_fShadowSideYE"));
    SET_TO(TimeCycCurrentStoredValue,       aml->GetSym(hGTASA, "_ZN10CTimeCycle20m_CurrentStoredValueE"));
    if(sautils != NULL)                     SET_TO(RTShadowsQuality, sautils->GetSettingValuePointer(SETITEM_SA_SHADOWS_QUALITY));
    else                                    SET_TO(RTShadowsQuality, pGTASA + BYBIT(0x6E049C, 0x8BEB6E));
    SET_TO(GetMobileEffectSetting,          aml->GetSym(hGTASA, "_Z22GetMobileEffectSettingv"));
    SET_TO(RQCaps,                          aml->GetSym(hGTASA, "RQCaps"));
    SET_TO(RQMaxBones,                      aml->GetSym(hGTASA, "RQMaxBones"));
    SET_TO(deviceChip,                      aml->GetSym(hGTASA, "deviceChip"));
    SET_TO(EntityPreRender,                 aml->GetSym(hGTASA, "_ZN7CEntity9PreRenderEv"));
    SET_TO(Radiosity,                       aml->GetSym(hGTASA, "_ZN12CPostEffects9RadiosityEiiii"));
    SET_TO(HeatHazeFX,                      aml->GetSym(hGTASA, "_ZN12CPostEffects10HeatHazeFXEfb"));
    SET_TO(LightningFlash,                  aml->GetSym(hGTASA, "LightningFlash"));
    SET_TO(IsVisionFXActive,                aml->GetSym(hGTASA, "_ZN12CPostEffects16IsVisionFXActiveEv"));
    SET_TO(TimeCycGetAmbientRed,            aml->GetSym(hGTASA, "_ZN10CTimeCycle13GetAmbientRedEv"));
    SET_TO(TimeCycGetAmbientGreen,          aml->GetSym(hGTASA, "_ZN10CTimeCycle15GetAmbientGreenEv"));
    SET_TO(TimeCycGetAmbientBlue,           aml->GetSym(hGTASA, "_ZN10CTimeCycle14GetAmbientBlueEv"));
    SET_TO(GetPipelineID,                   aml->GetSym(hGTASA, "_Z13GetPipelineIDP8RpAtomic"));
    SET_TO(GetExtraVertColourPtr,           aml->GetSym(hGTASA, "_ZN25CCustomBuildingDNPipeline21GetExtraVertColourPtrEP10RpGeometry"));
    SET_TO(ms_extraVertColourPluginOffset,  aml->GetSym(hGTASA, "_ZN25CCustomBuildingDNPipeline30ms_extraVertColourPluginOffsetE"));
    SET_TO(emu_ArraysDelete,                aml->GetSym(hGTASA, BYBIT("_Z16emu_ArraysDeletej", "_Z16emu_ArraysDeletey")));
    SET_TO(RwHackNoCompressedTexCoords,     aml->GetSym(hGTASA, "RwHackNoCompressedTexCoords"));
    SET_TO(_rxOpenGLAllInOneAtomicInstanceVertexArray, aml->GetSym(hGTASA, "_Z42_rxOpenGLAllInOneAtomicInstanceVertexArrayP24RxOpenGLMeshInstanceDataPK8RpAtomicPK10RpGeometry14RpGeometryFlagiiPhP6RwRGBASA_"));
    SET_TO(emu_ArraysIndices,               aml->GetSym(hGTASA, "_Z17emu_ArraysIndicesPvjj"));
    SET_TO(emu_ArraysVertex,                aml->GetSym(hGTASA, "_Z16emu_ArraysVertexPvjjj"));
    SET_TO(emu_ArraysVertexAttrib,          aml->GetSym(hGTASA, "_Z22emu_ArraysVertexAttribjijhi"));
    SET_TO(emu_ArraysStore,                 aml->GetSym(hGTASA, "_Z15emu_ArraysStorehh"));
    SET_TO(rwIsAlphaBlendOn,                aml->GetSym(hGTASA, "_Z16rwIsAlphaBlendOnv"));
    SET_TO(curSelectedShader,               aml->GetSym(hGTASA, "_ZN9EmuShader17curSelectedShaderE"));
    SET_TO(RQCreateShader,                  aml->GetSym(hGTASA, "_Z14RQCreateShaderPKcS0_j"));
    SET_TO(OS_ThreadMakeCurrent,            aml->GetSym(hGTASA, "_Z20OS_ThreadMakeCurrentv"));
    SET_TO(OS_ThreadUnmakeCurrent,          aml->GetSym(hGTASA, "_Z22OS_ThreadUnmakeCurrentv"));
    SET_TO(SelectEmuShader,                 aml->GetSym(hGTASA, "_ZN9EmuShader6SelectEb"));
    SET_TO(AmbientLightColor,               aml->GetSym(hGTASA, "AmbientLightColor"));
    SET_TO(AmbientLightDirty,               aml->GetSym(hGTASA, "AmbientLightDirty"));
    SET_TO(ms_fFarClip,                     aml->GetSym(hGTASA, "_ZN5CDraw12ms_fFarClipZE"));
    SET_TO(renderQueue,                     aml->GetSym(hGTASA, "renderQueue"));
    SET_TO(pRasterFrontBuffer,              aml->GetSym(hGTASA, "_ZN12CPostEffects18pRasterFrontBufferE"));
    SET_TO(curActiveTexture,                aml->GetSym(hGTASA, "_ZN10ES2Texture16curActiveTextureE"));
    SET_TO(boundTextures,                   aml->GetSym(hGTASA, "_ZN10ES2Texture13boundTexturesE"));
    SET_TO(Scene,                           aml->GetSym(hGTASA, "Scene"));
    SET_TO(currentAlphaFunc,                pGTASA + BYBIT(0x67A26C, 0x852330));
    SET_TO(currentAlphaFuncVal,             pGTASA + BYBIT(0x67A270, 0x852334));
    SET_TO(curShaderStateFlags,             aml->GetSym(hGTASA, "curShaderStateFlags"));
    SET_TO(RenderState,                     pGTASA + BYBIT(0x6B3208, 0x890120));
    SET_TO(Foggyness,                       aml->GetSym(hGTASA, "_ZN8CWeather9FoggynessE"));
    SET_TO(gradeBlur,                       aml->GetSym(hGTASA, "gradeBlur"));
    SET_TO(renderWidth,                     aml->GetSym(hGTASA, "renderWidth"));
    SET_TO(renderHeight,                    aml->GetSym(hGTASA, "renderHeight"));
    SET_TO(backTarget,                      aml->GetSym(hGTASA, "backTarget"));
    SET_TO(currentTarget,                   pGTASA + BYBIT(0x6BCC24, 0x89A1F0));
    SET_TO(FX_SPEED_VARS,                   aml->GetSym(hGTASA, "FX_SPEED_VARS"));
    SET_TO(m_bHeatHazeFX,                   aml->GetSym(hGTASA, "_ZN12CPostEffects13m_bHeatHazeFXE"));
    SET_TO(m_foundHeatHazeInfo,             aml->GetSym(hGTASA, "g_fxMan") + BYBIT(0xB8, 0x110));
    SET_TO(m_bRadiosity,                    aml->GetSym(hGTASA, "_ZN12CPostEffects12m_bRadiosityE"));
    SET_TO(m_bDarknessFilter,               aml->GetSym(hGTASA, "_ZN12CPostEffects17m_bDarknessFilterE"));
    SET_TO(HeatHazeFXControl,               aml->GetSym(hGTASA, "_ZN8CWeather17HeatHazeFXControlE"));
    SET_TO(WaterDepth,                      aml->GetSym(hGTASA, "_ZN8CWeather10WaterDepthE"));
    SET_TO(ms_fTimeStep,                    aml->GetSym(hGTASA, "_ZN6CTimer12ms_fTimeStepE"));
    SET_TO(m_CurrentColours,                aml->GetSym(hGTASA, "_ZN10CTimeCycle16m_CurrentColoursE"));
    SET_TO(m_snTimeInMilliseconds,          aml->GetSym(hGTASA, "_ZN6CTimer22m_snTimeInMillisecondsE"));
}